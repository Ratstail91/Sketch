Outline:

map data and tileset data will be kept separate.
Pagination isn't necessary, but it would be nice.

x count, y count, l count <--map data
tileset, tile w, tile h <--tileset data

TilesetManager and MapFrame are interesting concepts, both of which are more complicated than
"basic functionality". One allows for multiple tilesets in a single map, the other allows for pagination.
Although I'd like these features, they aren't necessary for a prototype.

-------------------------

Class List:

Region
Tileset
TilesetManager
MapFrame

-------------------------

Region: --single region class
	Constructor(x, y, l)
	Destructor
	
	-GenArray()
	-ClrArray()
	
	GetTile(x, y, l)
	SetTile(x, y, l, v) --only in the editor
	
	private:
	x count
	y count
	l count
	
	array...
end

-------------------------

Tileset:
	Constructor(fname, w, h) --tile width & height; also validates the file's tileset
	Destructor --frees the surface
	
	Get...
	SetCount
	
	private:
	tileset name --std::string
	tileset surface --SDL_Surface
	
	tile x --tiles along the x axis
	tile y --tiles along the y axis
	tile w --width in pixels of each tile
	tile h --height in pixels of each tile
	
	tile count --tiles in total (tile x * tile y)
	tile start --tiles in total prior to this tileset; higher cohesion
end

NOTES:

start is 0-indexed
count is absolute

start[x] = start[x-1] + count[x-1]

-------------------------

TilesetManager:
	LoadTileset(string, w, h) --add a tileset
	UnloadTileset(string) --remove a tileset, (pop the tiles too? that would need to be part of the higher script)
	
	Convert() --creates the strip surface
	GetList() --OO breaker
	
	vector<Tileset> list
end

NOTES:

TilesetManager holds all of the currently used tilesets, and can be used to add, delete or rearrange the
tilesets as needed. TilesetManager is also responsible for producing the strip of tiles as a usable surface.

The only ceveat is that all tilesets should have matching w & h for the tiles. If the conversion process
detects a problem, than it will reject the process.

sorting tilesets is impossible without remaking the map

if there is a problem during loading, all tilesets should be considered invalid, and should be cleared.

could the strip itself be a tileset object?

-------------------------

MapFrame:
	SetStrip(Tileset)
	GetStrip()
	
	LoadRegion		(x, y) --region is created here, but loaded from a lua script?
	UnloadRegion	(index)
	
	DrawTo(pDest, iCamX, iCamY)
	
	GetList() --OO Breaker
	
	private:
	
	struct {region, x, y} --structure for holding the region, and it's x & y
	Tileset strip
	vector<...> list
end

NOTES:

MapFrame is the actual map that is rendered to the screen, which then holds a list of regions
to be drawn.

-------------------------

--I need to hook the regions and the tilesets into lua

Lua functions:

NewRegion
NewTileset

DeleteRegion
DeleteTileset

-------------------------

--loads a region to the map frame
LoadRegion(region, x, y) --x & y are the...